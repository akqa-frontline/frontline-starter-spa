// This file contains the bare necessities to get the modal styled properly, but you'll probably want to skin
// it yourself. Please do, because this basic version is preeeeeetty ugly.
//
//
// Remember these three if you want to use the mq() mixin, or... well, any other kind of mixin, really. Since
// this styling file "lives inside" the JS-compiler, you need to include the specific stuff you need instead
// of relying on the automatic framework provided by our usual styling pipeline.
//
// @import "base/variables";
// @import "utilities/screensizes";
// @import "utilities/mixins";

.modal {
    &__wrapper,
    &__background {
        // Warning: "backface-visibility" and (especially) "will-change" automatically offloads these objects to the
        // GPU, which increases rendering speed dramatically,  but may have a detrimental effect on the rendering
        // quality. If you experience problems, disable/remove them.
        backface-visibility: hidden;
        opacity: 0;
        pointer-events: none;
        will-change: opacity, transform;

        // "ready" denotes that the element is added to the DOM, and is ready for transitions. This guards against
        // weird entry animations if the modal is spawned immediately after the script is loaded.
        &--ready {
            // Please note: the script listens for transition-events, so removing transitions outright might not be the
            // best idea. If you do, be sure to set "useTransitions: false" while instantiating modals, or clear the
            // "transitionEndEventName" constant in the script to disable transition-events for all modals everywhere.
            // But again, please use transitions. They are neat.
            transition-duration: 0.4s;
            transition-property: opacity, transform;
            transition-timing-function: ease-out;
        }

        &--visible {
            opacity: 1;
            pointer-events: auto;
            transition-timing-function: ease-out;
        }
    }

    &__background {
        background: rgba(#000, 0.8);
        bottom: -100px;
        position: fixed;
        top: -100px;
        width: 100%;

        @for $i from 0 through 10 {
            &--level#{$i} {
                z-index: (500 + $i);
            }
        }
    }

    &__wrapper {
        background: #fff;
        left: 50%;
        position: fixed;
        top: 50%;
        transform: translate(-50%, -20%);
        width: 90%;

        @for $i from 0 through 10 {
            &--level#{$i} {
                z-index: (501 + $i);
            }
        }

        &--visible {
            transform: translate(-50%, -50%);
        }
    }

    &__close {
        // This is the "Close"-button.

        /*
        // Maybe you can use this in your own project..?
        background: transparent;
        border: none;
        cursor: pointer;
        font-size: 3em;
        height: 1em;
        outline: none;
        pointer-events: auto;
        position: absolute;
        right: 0;
        top: 0;
        width: 1em;
        z-index: 1000;

        @include mq(sm) {
            right: 10px;
            top: 10px;
        }

        &::before,
        &::after {
            background: #000;
            content: "";
            height: 6%;
            left: 50%;
            position: absolute;
            top: 50%;
            transform-origin: 50% 50%;
            width: 80%;
        }

        &::before {
            transform: translate(-50%, -50%) rotate(-45deg);
        }

        &::after {
            transform: translate(-50%, -50%) rotate(45deg);
        }


        &-label {
            @include visuallyhidden;
        }
        */
    }

    &__header {
        // Header styling goes here.
    }

    &__title-wrapper {
        // Style title wrapper here
    }

    &__title {
        // Style title here
    }

    &__subtitle {
        // Style subtitle here
    }

    &__content {
        &-inner {
            // Style inner content here
        }
    }
}
